@page "/login"
@inject NavigationManager navigationManager
<PageTitle>Đăng nhập</PageTitle>

<EditForm Model="UserResult"
          title="Đăng nhập tài khoản">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3 mt-3">
        <div class="form-group">
            <InputText @bind-Value="UserResult.Username" class="form-control" placeholder="Tài Khoản"></InputText>
            <ValidationMessage For="()=> UserResult.Username" />
        </div>
    </div>

    <div class="mb-3 mt-3">
        <div class="form-group">
            <InputText @bind-Value="UserResult.Password" class="form-control" placeholder="Mật Khẩu"></InputText>
            <ValidationMessage For="()=> UserResult.Password" />
        </div>
    </div>

    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="OnHandlerLogin">Đăng nhập</Button>
</EditForm>

<Toasts class="p-3" Messages="ToastMessageUtil.Messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

@code {
    private UserModel UserResult { get; set; } = new();

    private async Task OnHandlerLogin()
    {
        var response = await UserManager.Login(UserResult);
        if (!response.Status)
        {
            ToastMessageUtil.ShowMessage(ToastType.Danger, response.Message);
            return;
        }

        Contants.UserInstanse = UserResult;

        var auth = (CustomAuthenticationStateProvider)AuthStateProvider;
        auth.MarkUserAsAuthenticated(response.Token);

        ToastMessageUtil.ShowMessage(ToastType.Success, response.Message);
        navigationManager.NavigateTo("/", true);
    }
}
