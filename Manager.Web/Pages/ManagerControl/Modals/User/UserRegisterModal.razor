<PageTitle>Đăng ký</PageTitle>

<Modal @ref="Ref">
    <BodyTemplate>
        <EditForm Model="User"
                  title="Đăng ký tài khoản">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Tài khoản</label>
                <InputText @bind-Value="User.Username" class="form-control" placeholder="Tài khoản"></InputText>
                <ValidationMessage For="()=> User.Username" />
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Mật khẩu</label>
                <InputText @bind-Value="User.Password" class="form-control" placeholder="Mật khẩu"></InputText>
                <ValidationMessage For="()=> User.Password" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="OnHandlerVaildSubmit">Đăng ký</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick="HideAsync">Thoát</Button>
    </FooterTemplate>
</Modal>

<Toasts class="p-3" Messages="ToastMessageUtil.Messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

@code {
    [Parameter]
    public Modal Ref { get; set; }

    [Parameter]
    public EventCallback OnHandlerVaildSubmitAndReload { get; set; }

    private UserModel User = new UserModel();

    public async Task ShowAsync() => await Ref.ShowAsync();
    public async Task HideAsync()
    {
        await OnHandlerVaildSubmitAndReload.InvokeAsync();
        await Ref.HideAsync();
    }

    private async Task OnHandlerVaildSubmit()
    {
        User.Role = new RoleModel
            {
                Role = "User"
            };

        User.Product = new ProductModel
            {
                Name = "New Register"
            };

        var response = await UserManager.Register(User);
        if (!response.Status)
        {
            ToastMessageUtil.ShowMessage(ToastType.Warning, response.Message);
            return;
        }
    }
}
