<PageTitle>Đăng nhập tài khoản</PageTitle>

<Modal @ref="Ref" Title="Đăng nhập tài khoản">
    <BodyTemplate>
        <EditForm Model="User"
                  title="Đăng nhập tài khoản">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Tài khoản</label>
                <InputText @bind-Value="User.Username" class="form-control" placeholder="Tài khoản"></InputText>
                <ValidationMessage For="()=> User.Username" />
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Mật khẩu</label>
                <InputText @bind-Value="User.Password" class="form-control" type="password" placeholder="Mật khẩu"></InputText>
                <ValidationMessage For="()=> User.Password" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Type="ButtonType.Button" Color="ButtonColor.Success" @onclick="OnHandlerVaildSubmit">Đăng nhập</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick="HideAsync">Thoát</Button>
    </FooterTemplate>
</Modal>

<Toasts class="p-3" Messages="ToastMessageUtil.Messages" AutoHide="true" Delay="3000" Placement="ToastsPlacement.TopRight" />

@code {
    [Parameter]
    public Modal Ref { get; set; }

    [Parameter]
    public EventCallback<UserModel> UserStateChanged { get; set; }

    [Parameter]
    public EventCallback OnHandlerVaildSubmitAndReload { get; set; }

    [Parameter]
    public UserModel User { get; set; } = new();

    public async Task ShowAsync() => await Ref.ShowAsync();
    public async Task HideAsync()
    {
        await OnHandlerVaildSubmitAndReload.InvokeAsync();
        await Ref.HideAsync();
    }

    private async Task OnHandlerVaildSubmit()
    {
        var response = await UserManager.Login(User);
        if (!response.Status)
        {
            ToastMessageUtil.ShowMessage(ToastType.Warning, response.Message);
            return;
        }

        var auth = (CustomAuthenticationStateProvider)AuthStateProvider;
        auth.MarkUserAsAuthenticated(response.Token);

        await HideAsync();
        ToastMessageUtil.ShowMessage(ToastType.Success, response.Message);
    }
}
