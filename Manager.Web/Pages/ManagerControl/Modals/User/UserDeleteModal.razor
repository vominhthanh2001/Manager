<PageTitle>@Title</PageTitle>

<Modal @ref="Ref" Title="@Title">
    <BodyTemplate>
        <EditForm Model="User">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Tài khoản</label>
                <span class="form-control text-truncate" placeholder="Tài khoản">@User.Username</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Mật khẩu</label>
                <span class="form-control text-truncate" placeholder="Mật khẩu">@User.Password</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Mật khẩu (hash)</label>
                <span class="form-control text-truncate" placeholder="Mật khẩu (hash)">@User.PasswordHash</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">License</label>
                <span class="form-control text-truncate" placeholder="License">@User.License</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Thời gian kích hoạt</label>
                <span class="form-control text-truncate" placeholder="Thời gian kích hoạt">@User.TimeActive</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Thời gian hết hạn</label>
                <span class="form-control text-truncate" placeholder="Thời gian hết hạn">@User.TimeExpired</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Thời gian còn lại</label>
                <span class="form-control" placeholder="Thời gian còn lại">@User.TimeRemaining</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Role</label>
                <span class="form-control" placeholder="Thời gian còn lại">@User.Role.Role</span>
            </div>

            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Product</label>
                <span class="form-control" placeholder="Thời gian còn lại">@User.Product.Name</span>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick="OnHandlerVaildSubmit">Xóa</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick="HideAsync">Thoát</Button>
    </FooterTemplate>
</Modal>

<Toasts class="p-3" Messages="ToastMessageUtil.Messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

@code {
    private string Title => $"Xóa Id : {User?.Id.ToString()}";

    [Parameter]
    public UserModel User { get; set; } = new();

    [Parameter]
    public Modal Ref { get; set; }

    [Parameter]
    public EventCallback OnHandlerVaildSubmitAndReload { get; set; }

    private List<ProductModel> products { get; set; } = new();
    private ProductModel productSelected { get; set; }

    private List<RoleModel> roles { get; set; } = new();
    private RoleModel roleSelected { get; set; }

    protected override async Task OnInitializedAsync()
    {
        products = await GetProductsAsync();
        productSelected = products.FirstOrDefault();

        roles = await GetRolesAsync();
        roleSelected = roles.FirstOrDefault();
    }

    private async Task<List<ProductModel>> GetProductsAsync()
    {
        var products = await ProductManager.GetAllAsync();
        return products;
    }

    private async Task<List<RoleModel>> GetRolesAsync()
    {
        var roles = new List<RoleModel>
        {
            new RoleModel { Id = 0 , Role = "User" },
            new RoleModel { Id = 1 , Role = "Administration"}
        };

        return roles;
    }

    private void ProductSelected(ProductModel product)
    {
        productSelected = product;
        User.Product = productSelected;
    }

    private void RoleSelected(RoleModel role)
    {
        roleSelected = role;
        User.Role = roleSelected;
    }

    private async Task OnHandlerVaildSubmit()
    {
        int id = User.Id;
        var response = await ListUserManager.DeleteAsync(id);
        if (!response.Status)
        {
            ToastMessageUtil.ShowMessage(ToastType.Warning, response.Message);
            return;
        }

        await HideAsync();
        ToastMessageUtil.ShowMessage(ToastType.Success, response.Message);
    }

    public async Task ShowAsync() => await Ref.ShowAsync();
    public async Task HideAsync()
    {
        await OnHandlerVaildSubmitAndReload.InvokeAsync();
        await Ref.HideAsync();
    }
}
