<Modal @ref="Ref" Title="Title">
    <BodyTemplate>
        <EditForm Model="Product">
            <div class="mb-3 mt-3">
                <label class="control-label mb-1">Tên</label>
                <InputText @bind-Value="Product.Name" class="form-control" placeholder="Tên"></InputText>
                <ValidationMessage For="()=> Product.Name" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Type="ButtonType.Button" Color="ButtonColor.Success" @onclick="OnHandlerVaildSubmit">Xóa</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick="HideAsync">Thoát</Button>
    </FooterTemplate>
</Modal>

<Toasts class="p-3" Messages="ToastMessageUtil.Messages" AutoHide="true" Delay="3000" Placement="ToastsPlacement.TopRight" />

@code {
    private string Title => $"Xóa Id : {Product.Id}";

    [Parameter]
    public Modal Ref { get; set; }

    [Parameter]
    public ProductModel Product { get; set; } = new();

    [Parameter]
    public EventCallback OnHandlerVaildSubmitAndReload { get; set; }

    private async Task OnHandlerVaildSubmit()
    {
        int id = Product.Id;
        var response = await ProductManager.DeleteAsync(id);
        if (!response)
        {
            ToastMessageUtil.ShowMessage(ToastType.Warning, $"Xóa product '{id}' thất tại");
            return;
        }

        await HideAsync();
        ToastMessageUtil.ShowMessage(ToastType.Success, "Xóa thành công");
    }

    public async Task ShowAsync() => await Ref.ShowAsync();
    public async Task HideAsync()
    {
        await OnHandlerVaildSubmitAndReload.InvokeAsync();
        await Ref.HideAsync();
    }
}
